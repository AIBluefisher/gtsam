name: CI

on: [push]

jobs:
  build:
    name: Linux Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-4.8,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-clang-9,
          windows-2016-cl,
          windows-2019-cl,
          macOS-10.14-xcode-10.3,
          macOS-10.14-gcc-9,
        ]

        include:
          - name: ubuntu-18.04-gcc-4.8
            os: ubuntu-18.04
            compiler: gcc
            version: "4.8"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"

          - name: windows-2016-cl
            os: windows-2016
            compiler: cl

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl

          - name: macOS-10.14-xcode-10.3
            os: macOS-10.14
            compiler: xcode
            version: "10.3"

          - name: macOS-10.14-gcc-9
            os: macOS-10.14
            compiler: gcc
            version: "9"
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi
          sudo apt-get update

          sudo apt install cmake g++-9 clang-9 build-essential pkg-config libpython-dev python-numpy libboost-all-dev
          
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi
    - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          fi
    - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          bash .travis.sh -t
    - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          bash .travis.sh -t
    - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -E remove_directory build
          cmake -B build -S . -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF
          cmake --build build --config Release --target gtsam
          cmake --build build --config Release --target gtsam_unstable
          cmake --build build --config Release --target wrap
          cmake --build build --config Release --target check.base
          cmake --build build --config Release --target check.base_unstable
          cmake --build build --config Release --target check.linear